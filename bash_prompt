# from https://gist.github.com/freddez/11399499#file-git-ps1-bash

# prompt examples:
#   [3 jobs master virtualenv] ~/code/myproject/foo
#   [1 job my-branch virtualenv] ~/code/bar/
#   [virtualenv] ~/code/
#   ~
# Very, very fast, only requiring a couple of fork()s (and no forking at all to determine the current git branch)

if [[ "$USER" == "root" ]]
then
    export PS1="\e[1;31m\]\u \[\e[1;33m\]\w\[\e[0m\] ";
else
    export PS1="\[\e[1;33m\]\w\[\e[0m\] ";
fi

# 100% pure Bash (no forking) function to determine the name of the current git branch
gitbranch() {
    export GITBRANCH=""

    if [[ "${_GITBRANCH_LAST_REPO-}" && "$PWD" != "${_GITBRANCH_LAST_REPO-}"* ]]; then
        # reset history if outside last repo
        unset _GITBRANCH_LAST_REPO
    fi
    local repo="${_GITBRANCH_LAST_REPO-}"
    local gitdir=""
    [[ ! -z "$repo" ]] && gitdir="$repo/.git"

    # If we don't have a last seen git repo, or we are in a different directory
    if [[ -z "$repo" || "$PWD" != "$repo"* || ! -e "$gitdir" ]]; then
        local cur="$PWD"
        while [[ ! -z "$cur" ]]; do
            if [[ -e "$cur/.git" ]]; then
                repo="$cur"
                gitdir="$cur/.git"
                break
            fi
            cur="${cur%/*}"
        done
    fi

    if [[ -z "$gitdir" ]]; then
        unset _GITBRANCH_LAST_REPO
        return 0
    fi
    export _GITBRANCH_LAST_REPO="${repo}"
    local head=""
    local branch=""
    read head < "$gitdir/HEAD"
    case "$head" in
        ref:*)
            branch="${head##*/}"
            ;;
        "")
            branch=""
            ;;
        *)
            branch="d:${head:0:7}"
            ;;
    esac
    if [[ -z "$branch" ]]; then
        return 0
    fi
    export GITBRANCH="$branch"
}

PS1_green='\[\e[32m\]'
PS1_blue='\[\e[34m\]'
PS1_reset='\[\e[0m\]'
PS1_bold='\[\e[1m\]'
PS1_italic='\[\e[3m\]'
PS1_black='\[\e[30m\]'
PS1_cyan='\[\e[36m\]'
PS1_orange='\[\e[33m\]'
PS1_purple='\[\e[35m\]'
PS1_red='\[\e[31m\]'
PS1_violet='\[\e[35m\]'
PS1_white='\[\e[37m\]'
PS1_yellow='\[\e[33m\]'
PS1_underline='\[\e[4m\]'

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${orange}";
else
	userStyle="${reset}";
fi;

# Highlight the hostname when connected via SSH.
hostnamecolor=$(hostname | od | tr ' ' '\n' | awk '{total = total + $1}END{print 32 + (total % 6)}')
hostStyle="\[\e[${hostnamecolor}m\]"
if [[ "${SSH_TTY}" ]]; then
	hostStyle1="$underline$hostStyle@";
else
	hostStyle1="$hostStyle";
fi;

PS1_START_TIME=`date +%s`
LAST_COMMAND="bash"

function record_time() {
	#echo $BASH_COMMAND >&2
	[[ $BASH_COMMAND != "_mk_prompt" ]] && PS1_START_TIME=`date +%s`
}

function time_diff_f() {
	local MIN=60
	local HOUR=3600
	local DAY=86400
	local NOW=`date +%s`
	local time_diff=$(( $NOW - $PS1_START_TIME ))
	#BC="now=$NOW start=$PS1_START_TIME diff=$time_diff"

	time_str=""
	local num_days=$(( $time_diff / $DAY ))
	[[ $num_days -gt 0 ]] && time_str="$time_str${num_days}d"
	local num_hours=$(( $time_diff % $DAY /$HOUR ))
	[[ $num_hours -gt 0 || $num_days -gt 0 ]] && time_str="$time_str${num_hours}h"
	local num_min=$(( $time_diff % $HOUR /$MIN ))
	[[ $num_min -gt 0 || "$time_str" != ""  ]] && time_str="$time_str${num_min}m"
	local num_sec=$(( $time_diff % $MIN ))
	[[ $num_sec -gt 0 || "$time_str" != ""  ]] && time_str="$time_str${num_sec}s"
	#PS1_START_TIME=`date +%s`
	echo $time_str
}

trap 'record_time' DEBUG

PS1_reset='\[\e[0m\]'
_mk_prompt() {
	local EXIT="$?"
	local TIME_DIFF=`time_diff_f`
	#local TIME=`date "+%H:%M"`
    # Change the window title of X terminals
    case $TERM in
        xterm*|rxvt*|Eterm)
            echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\007"
           ;;
        screen)
            echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\033\\"
          ;;
    esac

    # Un-screw virtualenv stuff
    if [[ ! -z "${_OLD_VIRTUAL_PS1-}" ]]; then
        export PS1="$_OLD_VIRTUAL_PS1"
        unset _OLD_VIRTUAL_PS1
    fi

    if [[ -z "${_MK_PROMPT_ORIG_PS1-}" ]]; then
        export _MK_PROMPT_ORIG_PS1="$PS1"
    fi

    local prefix=()
    local jobcount="$(jobs -p | wc -l)"
    if [[ "$jobcount" -gt 0 ]]; then
        local job="${jobcount##* } job"
        [[ "$jobcount" -gt 1 ]] && job="${job}s"
        prefix+=("$job")
    fi

    gitbranch
    if [[ ! -z "$GITBRANCH" ]]; then
        prefix+=("${PS1_green}$GITBRANCH${PS1_reset}")
        # You must have that unicode "branch" character in your
        # terminal font
    fi

    local virtualenv="${VIRTUAL_ENV##*/}"
    if [[ ! -z "$virtualenv" ]]; then
        prefix+=("${PS1_blue}$virtualenv${PS1_reset}")
    fi

    PS1="$_MK_PROMPT_ORIG_PS1"
    # MAIN_HOSTNAME must be defined in .bashrc
    if [[ $HOSTNAME == $MAIN_HOSTNAME ]]; then
        PS1="âŒ‚ $PS1"
    else
        PS1="$hostStyle1${HOSTNAME/.*}$PS1_reset $PS1"
    fi

	[[ "$TIME_DIFF" != "" ]] && PS1="$PS1_blue$TIME_DIFF$PS1_reset $PS1"

    if [[ ! -z "$prefix" ]]; then
        PS1="$PS1${prefix[@]} "
    fi

	[[ "$EXIT" != 0 ]] && PS1="$PS1_red$EXIT$PS1_reset $PS1"

    if [[ ! -z "${VTE_VERSION}" ]]; then
       type __vte_prompt_command 2> /dev/null && __vte_prompt_command
    fi
    export PS1
}
PROMPT_COMMAND=_mk_prompt

